package salehs.javaassembler;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;

import com.formdev.flatlaf.FlatDarculaLaf;
import org.fife.ui.rsyntaxtextarea.AbstractTokenMakerFactory;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxScheme;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenMakerFactory;
import org.fife.ui.rtextarea.RTextScrollPane;

/**
 *
 * @author Saleh
 */
public class AssemblerGUI extends javax.swing.JFrame {

    /**
     * Creates new form AssemblerGUI
     */
    private final ImageIcon img;
    private RSyntaxTextArea textArea;
    private AssemblerConfig config;
    private PreProcessor preprocessor;
    private Assembler assembler;
    private String filename;
    private JFileChooser fileChooser;
    private FileNameExtensionFilter asmFilter, jsonFilter;
    private boolean saved, modified;

    public AssemblerGUI() {
        img = new ImageIcon("icon.jpg");
        initComponents();
        setupAssembler();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        assembleBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newFileMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        openFileMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        saveFileMenuItem = new javax.swing.JMenuItem();
        saveAsFileMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        Exit = new javax.swing.JMenuItem();
        optionMenu = new javax.swing.JMenu();
        jsonMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("  COE 301 Assembler By Saleh AlSaleh"); // NOI18N
        setMinimumSize(new java.awt.Dimension(900, 600));
        setName("Form"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(900, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitAssembler(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        assembleBtn.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        assembleBtn.setText("Assemble");
        assembleBtn.setName("assembleBtn"); // NOI18N
        assembleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assembleBtnActionPerformed(evt);
            }
        });
        getContentPane().add(assembleBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 490, 140, 40));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        statusLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        statusLabel.setText("Status: Error Messages will appear here");
        statusLabel.setName("statusLabel"); // NOI18N
        jPanel1.add(statusLabel);

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 550, 900, 30));

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText("File");
        fileMenu.setName("fileMenu"); // NOI18N

        newFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N,
                java.awt.event.InputEvent.CTRL_DOWN_MASK));
        newFileMenuItem.setText("New");
        newFileMenuItem.setName("newFileMenuItem"); // NOI18N
        newFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newFileMenuItem);

        jSeparator1.setName("jSeparator1"); // NOI18N
        fileMenu.add(jSeparator1);

        openFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O,
                java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openFileMenuItem.setText("Open");
        openFileMenuItem.setName("openFileMenuItem"); // NOI18N
        openFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openFileMenuItem);

        jSeparator2.setName("jSeparator2"); // NOI18N
        fileMenu.add(jSeparator2);

        saveFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S,
                java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveFileMenuItem.setText("Save");
        saveFileMenuItem.setName("saveFileMenuItem"); // NOI18N
        saveFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveFileMenuItem);

        saveAsFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S,
                java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveAsFileMenuItem.setText("Save As");
        saveAsFileMenuItem.setName("saveAsFileMenuItem"); // NOI18N
        saveAsFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsFileMenuItem);

        jSeparator3.setName("jSeparator3"); // NOI18N
        fileMenu.add(jSeparator3);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q,
                java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Exit.setText("Exit");
        Exit.setName("Exit"); // NOI18N
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        fileMenu.add(Exit);

        menuBar.add(fileMenu);

        optionMenu.setText("Option");
        optionMenu.setName("optionMenu"); // NOI18N

        jsonMenuItem.setText("Load config (JSON)");
        jsonMenuItem.setName("jsonMenuItem"); // NOI18N
        jsonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jsonMenuItemActionPerformed(evt);
            }
        });
        optionMenu.add(jsonMenuItem);

        menuBar.add(optionMenu);

        setJMenuBar(menuBar);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void openFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_openFileMenuItemActionPerformed
        this.fileChooser.setFileFilter(asmFilter);
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            filename = fileChooser.getSelectedFile().getAbsolutePath();
            try (BufferedReader reader = Files.newBufferedReader(new File(filename).toPath())) {
                String line;
                String code = "";
                while ((line = reader.readLine()) != null) {
                    code += line + "\n";
                }
                this.textArea.setText(code);
                saved = false;
                this.statusLabel.setText("Status: Assembly file opened successfully");
                this.statusLabel.setForeground(new Color(0, 255, 0));
                modified = true;
            } catch (IOException x) {
                JOptionPane.showMessageDialog(this, "File could not be opened: " + filename,
                        "Could not read assembly file", JOptionPane.ERROR_MESSAGE);
            }
        }

    }// GEN-LAST:event_openFileMenuItemActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ExitActionPerformed
        this.exitAssembler(null);
    }// GEN-LAST:event_ExitActionPerformed

    private void newFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newFileMenuItemActionPerformed
        this.filename = null;
        textArea.setText("");
        saved = false;
    }// GEN-LAST:event_newFileMenuItemActionPerformed

    private void saveFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveFileMenuItemActionPerformed
        if (modified) {
            if (filename == null) {
                this.saveAsFileMenuItemActionPerformed(null);
            } else {
                writeAssemblyFile();

            }
        }
    }// GEN-LAST:event_saveFileMenuItemActionPerformed

    private void saveAsFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveAsFileMenuItemActionPerformed
        this.fileChooser.setFileFilter(asmFilter);
        int result = fileChooser.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            filename = fileChooser.getSelectedFile().getAbsolutePath();
            if (!filename.endsWith(".asm")) {
                filename += ".asm";
            }
            writeAssemblyFile();
        }
    }// GEN-LAST:event_saveAsFileMenuItemActionPerformed

    private void exitAssembler(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_exitAssembler
        this.saveFileMenuItemActionPerformed(null);
        this.dispose();
        System.exit(0);
    }// GEN-LAST:event_exitAssembler

    private void assembleBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_assembleBtnActionPerformed
        this.saveFileMenuItemActionPerformed(null);
        if (saved) {
            String preprocessed = preprocessor.process(textArea.getText());
            HashMap<String, Integer> labels = preprocessor.getLabels();
            String hexFile = filename.substring(0, filename.lastIndexOf(".")) + ".hex";
            try {
                String assembled = assembler.assemble(preprocessed, labels);
                BufferedWriter writer = Files.newBufferedWriter(new File(hexFile).toPath());
                writer.write(assembled, 0, assembled.length());
                writer.close();
                this.statusLabel.setText("Status: File Assembled Successfully");
                this.statusLabel.setForeground(new Color(0, 255, 0));
            } catch (IOException x) {
                JOptionPane.showMessageDialog(this, "Hex File could not be opened: " + hexFile,
                        "Could not write hex file", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                this.statusLabel.setText("Status: " + e.getMessage());
                this.statusLabel.setForeground(Color.red);
            }
        }

    }// GEN-LAST:event_assembleBtnActionPerformed

    private void jsonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jsonMenuItemActionPerformed
        this.fileChooser.setFileFilter(jsonFilter);
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            this.config = new AssemblerConfig(fileChooser.getSelectedFile().getAbsolutePath());
            assembler = new Assembler(config);
            this.statusLabel.setText("Status: Config file loaded successfully");
            this.statusLabel.setForeground(new Color(0, 255, 0));
        }
    }// GEN-LAST:event_jsonMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        try {
            UIManager.setLookAndFeel(new FlatDarculaLaf());
            new AssemblerGUI().setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Could not set custom theme. Falling back to the basic native theme",
                    "Error setting custom theme", JOptionPane.ERROR_MESSAGE);
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                new AssemblerGUI().setVisible(true);
            } catch (ClassNotFoundException | InstantiationException |IllegalAccessException | UnsupportedLookAndFeelException e1) {
                JOptionPane.showMessageDialog(null, "Could not set native theme.", "Error setting native theme", JOptionPane.ERROR_MESSAGE);
            } catch (Exception err) {
                JOptionPane.showMessageDialog(null, "Could not set native theme.", "Error setting native theme", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.JButton assembleBtn;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenuItem jsonMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newFileMenuItem;
    private javax.swing.JMenuItem openFileMenuItem;
    private javax.swing.JMenu optionMenu;
    private javax.swing.JMenuItem saveAsFileMenuItem;
    private javax.swing.JMenuItem saveFileMenuItem;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables

    private void writeAssemblyFile() {
        if (modified) {
            try (BufferedWriter writer = Files.newBufferedWriter(new File(filename).toPath())) {
                String code = this.textArea.getText();
                writer.write(code, 0, code.length());
                writer.close();
                this.statusLabel.setText("Status: Assembly file saved successfully");
                this.statusLabel.setForeground(new Color(0, 255, 0));
                saved = true;
            } catch (IOException x) {
                JOptionPane.showMessageDialog(this, "File could not be opened: " + filename,
                        "Could not write assembly file", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void setupAssembler() {
        this.filename = null;
        this.fileChooser = new JFileChooser(".");
        this.asmFilter = new FileNameExtensionFilter("Assembly Files (.asm)", "asm", "text");
        this.jsonFilter = new FileNameExtensionFilter("JSON Files (.json)", "json", "text");
        this.setIconImage(img.getImage());
        this.config = new AssemblerConfig("config.json");
        this.preprocessor = new PreProcessor();
        this.assembler = new Assembler(config);
        this.modified = false;
        // Code Text Editor
        this.textArea = new RSyntaxTextArea(20, 60);
        this.textArea.setFont(new Font("Comic Sans MS", Font.PLAIN, 16));
        this.textArea.addKeyListener(new KeyListener() {
            @Override
            public void keyPressed(KeyEvent e) {
                modified = true;
            }

            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyReleased(KeyEvent e) {
            }
        });
        AbstractTokenMakerFactory atmf = (AbstractTokenMakerFactory) TokenMakerFactory.getDefaultInstance();
        atmf.putMapping("text/salehs", "salehs.javaassembler.CustomSyntaxHighlighter");
        this.textArea.setSyntaxEditingStyle("text/salehs");
        RTextScrollPane sp = new RTextScrollPane(textArea);
        getContentPane().add(sp, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 870, 470));
        SyntaxScheme scheme = textArea.getSyntaxScheme();
        scheme.getStyle(Token.COMMENT_EOL).font = new Font("Georgia", Font.PLAIN, 16);
        scheme.getStyle(Token.RESERVED_WORD).foreground = Color.BLUE;
        scheme.getStyle(Token.RESERVED_WORD).background = Color.YELLOW;
        this.textArea.revalidate();
    }
}
